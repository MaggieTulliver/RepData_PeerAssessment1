help.start()
q()
add2 <- function(x,y){
x+y
}
add2(5,3)
above <- function(x,y){
use <- x>n
x[use]
}
x <- 1:20
above(x,12)
above(x, 12)
above <- function(x,n){
use <- x>n
x[use]
}
x <- 1:20
above(x,12)
above(x, n=10){
use <- x>10
x[use]
}
above(x, n=10){
use <- x>10
x[use]
}
above <- function(x, n=10){
use <- x>10
x[use]
}
above(x)
columnmean <-function(x, removeNA=TRUE){
nc <-ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i]<- mean(x[ , i], na.rm=removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, removeNA=FALSE)
cube <- function (x,n){
x^3
}
cube(3)
x <- 1:10
if (x>5){
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
id <- 1:32
numeric(id)
length(id)
pollutantmean <- function(directory, pollutant, id=1:332){
num <- length(id)
for (i in 1:num)
data<-read.csv("directory/i.csv", header=TRUE)
data[1,1]
}
pollutantmean("specdata",id=1:2)
pollutantmean <- function(directory, pollutant, id=1:332){
num <- length(id)
for (i in 1:num)
data<-read.csv(directory/i.csv, header=TRUE)
data[1,1]
}
pollutantmean("specdata",id=1:2)
getfile <- function(directory = getwd(), id) {
filenames <- sprintf("%03d.csv", id)
filedir <- file.path(directory, filenames)
dataset <- read.csv(filedir, header = TRUE)
dataset
}
getfile(1)
getfile (id=1)
getfile(id=1)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vec <- c(1,2,3,4,5,6,7,8,9)
vv = makeVector(vec)
attributes(vv)
vv$get()
cachemean(vv)
cachemean(vv)
## Functions to create an inverse of a matrix
## Function to set the value of a vector, get the value
## set the inverse and get the inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Check to see if inverse has already been calculated
## If not, calculate inverse and set in cache using setinverse
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
x -> matrix(1:4, 2,2)
x <- matrix(1:4, 2,2)
x1 <- makeCacheMatrix(x)
cacheSolve(x1)
best <- function(state, outcome) {
## Read outcome data
hosp_data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
## Check that state and outcome are valid
state_abbs <- unique(hosp_data[ ,7])
if (state %in% state_abbs == FALSE) {
stop("invalid state")
}
conditions <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% conditions == FALSE) {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death
## rate
statedata <- hosp_data[hosp_data$State == state,]
if (outcome == "heart attack"){
bestdata <- statedata[which.min(statedata[ ,11]), ]
besthosp <- bestdata[ ,2]
if (length(besthosp) == 1)
besthosp
else {
besthosp <- sort(besthosp)
besthosp[1]
}
}
planets.df[1:3, ]
a <- c(5, 7, 1, 6, 9 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
rpois(5, 2)
library(xlsx)
fileURL <- "
https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileURL, destfile = "NGAP.xlsx", mode = "wb")
fileURL <- "
https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
fileURL<-"
https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileURL, destfile = "NGAP.xlsx", mode = "wb")
download.file(fileURL, destfile = "NGAP.xlsx")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileURL, destfile = "NGAP.xlsx", mode = "wb")
rowIndex <- 18:23
colIndex <- 7:15
NGAPsubset <- read.xlsx("NGAP.xlsx", sheetIndex=1, colIndex=colIndex, rowIndex=rowIndex)
NGAPsubset
sum(NGAPsubset$Zip*NGAPsubset$Ext,na.rm=T)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "077a483710edb01310fd6a2515d5e62a2998d938")
myapp <- oauth_app("github", "038669e1dbd1ca7624d6214d5e7f4df414229d82")
myapp <- oauth_app("github", "66b070490d1585fc5a51", "038669e1dbd1ca7624d6214d5e7f4df414229d82")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
utils:::menuInstallPkgs()
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
q()
getwd()
download.file ("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "ACS.csv", mode="wb")
ACSdata <- read.csv("ACS.csv")
head(ACSdata)
agricultureLogical <- ACSdata[ACSdata$ACR ==3 && ACSdata$ACS == 6]
which(agricultureLogical)
agricultureLogical <- ACSdata$ACR ==3 && ACSdata$ACS == 6
which(agricultureLogical)
agricultureLogical <- ACSdata[, ACSdata$ACR ==3 && ACSdata$ACS == 6]
which(agricultureLogical)
agricultureLogical <- with(ACSdata, ACSdata[ACSdata$ACR ==3 && ACSdata$ACS == 6])
which(agricultureLogical)
agricultureLogical <- with(ACSdata, ACR == 3 & ACS ==6)
agricultureLogical <- with(ACSdata, ACR == 3 & AGS ==6)
which(agricultureLogical)
agricultureLogical <- ACSdata[ACSdata$ACR ==3 & ACSdata$AGS == 6]
agricultureLogical <- ACSdata[, ACSdata$ACR ==3 && ACSdata$AGS == 6]
which(agricultureLogical)
agricultureLogical <- ACSdata$ACR ==3 & ACSdata$AGS == 6
which(agricultureLogical)
install.packages("jpeg")
library(https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg
)
library(jpeg)
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "jeff.jpg", mode="wb"
)
jeffimg <- readJPEG("jeff.jpg", native=TRUE)
quantile(jeffimg, C(.3, .8))
quantile(jeffimg, c(.3, .8))
download.data("https//d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "GDPdata.csv", mode = "wb")
download.file("https//d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "GDPdata.csv", mode = "wb")
download.data("http//d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "GDPdata.csv", mode = "wb")
download.file("http//d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "GDPdata.csv", mode = "wb")
download.file("http//d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "GDPdata.csv")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "GDP.csv")
GDPdata <- read.csv("GDP.csv")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "edu.csv")
edudata <- read.csv("edu.csv")
head(GDPdata)
names(GDPdata)
GDPdata <- read.csv("GDP.csv", header=TRUE)
head(GDPdata)
GDPdata <- read.csv("GDP.csv", header=TRUE, skip=2)
head(GDPdata)
GDPdata <- read.csv("GDP.csv", skip=3, header=TRUE)
head(GDPdata)
GDPdata <- read.csv("GDP.csv", skip=3)
head(GDPData)
head(GDPdata)
names(GDPdata)
download.file("http://www.dropbox.com/s/fjeld6rv81jg06f/appleorange.csv", destfile = "ao.csv")
download.file("http://www.dropbox.com/s/t7jq9d8esip1aqj/stability.csv", destfile= "stability.csv")
ao <- read.csv("ao.csv")
str(ao)
aoraw <- read.csv("appleorange.csv", stringsAsFactors=FALSE, header=FALSE)
aoraw <- read.csv("ao.csv", stringsAsFactors=FALSE, header=FALSE)
str(aoraw)
head(aoraw)
head(aoraw, 10)
tail(aoraw, 10)
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region=state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
library(ggplot2)
data(mpg)
qplot(displ, hwy, data=mpg)
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Winde, Ozone))
with(airquality, plot(Wind, Ozone))
plot(airquality$Wind, airquality$Ozone)
with(airquality, plot(Wind, Ozone))
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone")
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, airquality)
xyplot(Ozone ~ Wind | Month, airquality, layout = c(5,1))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
print(p)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(ggplot2)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"))
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets = .~drv)
qplot(hwy, data=mpg, facets = drv~.)
qplot(log(eno), data = maacs)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = .~Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[, 1:5])
set.seed(3435)
trainIndicator = rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator==1,]
testSpam = spam[trainIndicator==0, ]
install.packages("knitr")
setwd("~/R_Coursera/RepData_PeerAssessment1")
unzip("activity.zip")
read.csv("activity.csv")
